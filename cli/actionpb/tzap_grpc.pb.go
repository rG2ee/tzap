// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.0
// source: tzap.proto

package actionpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TzapService_Search_FullMethodName  = "/actionpb.TzapService/Search"
	TzapService_Prompt_FullMethodName  = "/actionpb.TzapService/Prompt"
	TzapService_Request_FullMethodName = "/actionpb.TzapService/Request"
)

// TzapServiceClient is the client API for TzapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TzapServiceClient interface {
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	Prompt(ctx context.Context, in *PromptRequest, opts ...grpc.CallOption) (*TzapResponse, error)
	Request(ctx context.Context, in *TzapRequest, opts ...grpc.CallOption) (*TzapResponse, error)
}

type tzapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTzapServiceClient(cc grpc.ClientConnInterface) TzapServiceClient {
	return &tzapServiceClient{cc}
}

func (c *tzapServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, TzapService_Search_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tzapServiceClient) Prompt(ctx context.Context, in *PromptRequest, opts ...grpc.CallOption) (*TzapResponse, error) {
	out := new(TzapResponse)
	err := c.cc.Invoke(ctx, TzapService_Prompt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tzapServiceClient) Request(ctx context.Context, in *TzapRequest, opts ...grpc.CallOption) (*TzapResponse, error) {
	out := new(TzapResponse)
	err := c.cc.Invoke(ctx, TzapService_Request_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TzapServiceServer is the server API for TzapService service.
// All implementations must embed UnimplementedTzapServiceServer
// for forward compatibility
type TzapServiceServer interface {
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	Prompt(context.Context, *PromptRequest) (*TzapResponse, error)
	Request(context.Context, *TzapRequest) (*TzapResponse, error)
	mustEmbedUnimplementedTzapServiceServer()
}

// UnimplementedTzapServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTzapServiceServer struct {
}

func (UnimplementedTzapServiceServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedTzapServiceServer) Prompt(context.Context, *PromptRequest) (*TzapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prompt not implemented")
}
func (UnimplementedTzapServiceServer) Request(context.Context, *TzapRequest) (*TzapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request not implemented")
}
func (UnimplementedTzapServiceServer) mustEmbedUnimplementedTzapServiceServer() {}

// UnsafeTzapServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TzapServiceServer will
// result in compilation errors.
type UnsafeTzapServiceServer interface {
	mustEmbedUnimplementedTzapServiceServer()
}

func RegisterTzapServiceServer(s grpc.ServiceRegistrar, srv TzapServiceServer) {
	s.RegisterService(&TzapService_ServiceDesc, srv)
}

func _TzapService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TzapServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TzapService_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TzapServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TzapService_Prompt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TzapServiceServer).Prompt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TzapService_Prompt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TzapServiceServer).Prompt(ctx, req.(*PromptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TzapService_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TzapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TzapServiceServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TzapService_Request_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TzapServiceServer).Request(ctx, req.(*TzapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TzapService_ServiceDesc is the grpc.ServiceDesc for TzapService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TzapService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "actionpb.TzapService",
	HandlerType: (*TzapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _TzapService_Search_Handler,
		},
		{
			MethodName: "Prompt",
			Handler:    _TzapService_Prompt_Handler,
		},
		{
			MethodName: "Request",
			Handler:    _TzapService_Request_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tzap.proto",
}
